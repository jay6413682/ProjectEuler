'''
Created on Nov 25, 2014

@author: ljiang
'''
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
import timeit

def fib(n):
    if n<0 or type(n) is not int:
        return False
    if n==1:
        return 1
    if n==2: return 2
    else:
        return fib(n-1)+fib(n-2)

def fib2():
    fib1=1
    fib2=1
    result=0
    sm=0
    while result<=4000000:
        if result %2==0:
            sm=sm+result

        result=fib1+fib2
        fib2=fib1
        fib1=result
    print sm

def fib3():
    f0=0
    f3=2
    fn=0
    sm=2
    while fn<=4000000:
        sm=sm+fn
        fn=f0+4*f3
        f0=f3
        f3=fn
    print sm
         
def exc():
    i=1
    sm=0
    while True:
        value=fib(i)
        if value <= 4000000:
            i+=1 
            if value%2==0:
                sm+=value    
        else:
            break
    
    print sm

def fib4():
    fx=[2,0]
    i=0
    sm=0
    while fx[i]<=4000000:
        sm=sm+fx[i]
        i=(i+1)%2
        fx[i]=4*fx[(i+1)%2]+fx[i]
    print sm  

exc()
fib2()
fib3()
fib4()


print timeit.timeit(exc,'from __main__ import exc',number=1)
print timeit.timeit(fib2,'from __main__ import fib2',number=1)
print timeit.timeit(fib3,'from __main__ import fib3',number=1)
print timeit.timeit(fib4,'from __main__ import fib3',number=1)